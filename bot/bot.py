import logging
import asyncio
import aiohttp
import tzlocal
import json
from settings import TOKEN_BOT, IMEI_API
from datetime import datetime
from aiohttp.client_exceptions import ClientConnectorError
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart


logging.basicConfig(level=logging.INFO)
bot = Bot(str(TOKEN_BOT))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
local_timezone = tzlocal.get_localzone()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_imei = State()


# IMEI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
async def imei_info(device_info: dict) -> str:

    if device_info is not None:
        response = (
            f"üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å IMEI {device_info['imei'] if device_info.get('imei') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}**:\n"
            f"üì± **–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞**: {device_info['deviceName'] if device_info.get('deviceName') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üåç **–°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏**: {device_info['purchaseCountry'] if device_info.get('purchaseCountry') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üóìÔ∏è **–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏**: {datetime.fromtimestamp(device_info['estPurchaseDate'], local_timezone).strftime('%Y-%m-%d %H:%M:%S') if device_info.get('estPurchaseDate') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîí **SIM Lock**: {device_info['simLock'] if device_info.get('simLock') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üõ°Ô∏è **–°—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏**: {device_info['warrantyStatus'] if device_info.get('warrantyStatus') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üõ†Ô∏è **–ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–µ–º–æ–Ω—Ç–∞**: {device_info['repairCoverage'] if device_info.get('repairCoverage') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üÜò **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**: {device_info['technicalSupport'] if device_info.get('technicalSupport') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üé® **–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏**: {device_info['modelDesc'] if device_info.get('modelDesc') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì¶ **–î–µ–º–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ**: {device_info['demoUnit'] if device_info.get('demoUnit') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîÑ **–ë—ã–ª –≤ —Ä–µ–º–æ–Ω—Ç–µ**: {device_info['refurbished'] if device_info.get('refurbished') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì∂ **–°–µ—Ç—å**: {device_info['network'] if device_info.get('network') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üá∫üá∏ **–°—Ç–∞—Ç—É—Å –≤ –°–®–ê**: {device_info['usaBlockStatus'] if device_info.get('usaBlockStatus') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîí **Find My iPhone (FMI)**: {device_info['fmiOn'] if device_info.get('fmiOn') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üö´ **–†–µ–∂–∏–º –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞**: {device_info['lostMode'] if device_info.get('lostMode') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üñºÔ∏è [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞]({device_info['image'] if device_info.get('image') != None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})"
        )
    else:
        response = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IMEI. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /imei, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å imei –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    return response


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_tg_user_api(username: str, chat_id: str):
    url = f"https://my.telegram.org/auth/telegram"
    json_data = {"chat_id": int(chat_id), "username": username}
    error_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=json_data) as response:
                if response.status != 200:
                    return error_text
                else:
                    success_text = f"–ü—Ä–∏–≤–µ—Ç, {username}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /imei –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å IMEI"
                    return success_text
    except ClientConnectorError as e:
        print(e)
        return error_text


# –ü—Ä–æ–≤–µ—Ä–∫–∏ IMEI
async def validate_imei(imei: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(imei) != 15:
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ —Ü–∏—Ñ—Ä—ã
    if not imei.isdigit():
        return False

    # –ê–ª–≥–æ—Ä–∏—Ç–º Luhn
    total = 0

    for i, digit in enumerate(imei):
        n = int(digit)
        # –£–¥–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é —Ü–∏—Ñ—Ä—É
        if i % 2 == 1:
            n *= 2
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–µ 9, –≤—ã—á—Ç–µ–º 9
            if n > 9:
                n -= 9
        total += n

    # –ï—Å–ª–∏ —Å—É–º–º–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 10, IMEI –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    return total % 10 == 0

async def check_balance():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    url = 'https://api.imeicheck.net/v1/account'
    imei_api = str(IMEI_API)
    headers = {
        "Authorization": "Bearer " + imei_api,
        "Content-Type": "application/json"
    }
    error_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ API"


    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    balance = await response.text()
                    count = json.loads(balance)
                    return count['balance']
                else:
                    return f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å. –û—à–∏–±–∫–∞ {response.status}'
    except ClientConnectorError:
        return error_text


# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö IMEI
async def check_imei_api(imei: str):
    url = "https://api.imeicheck.net/v1/checks"
    imei_api = str(IMEI_API)
    headers = {
        "Authorization": "Bearer " + imei_api,
        "Content-Type": "application/json"
    }
    body = json.dumps({"deviceId": imei, "serviceId": 1})
    error_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /imei, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å imei –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    if await check_balance() != 0:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, data=body) as response:
                    if response.status == 200:
                        res = await response.text()
                        json_res = json.loads(res)
                        for device in json_res:
                            if device.get("deviceId") == imei:
                                return await imei_info(device.get("properties", None))
                    elif response.status == 400 or response.status == 404:
                        json_res = await response.json()
                        return json_res["detail"]
                    else:
                        return response.text
        except ClientConnectorError:
                return error_text
    else:
        return f'–í–∞—à –±–∞–ª–∞–Ω—Å: {check_balance}, —ç—Ç–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç.'


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    message_text = await create_tg_user_api(
        username=message.chat.username, chat_id=message.chat.id
    )
    await message.reply(message_text)


# –ö–æ–º–∞–Ω–¥–∞ /imei
@dp.message(Command("imei"))
async def send_welcome(message: types.Message):
    await message.reply("–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ 15-–∑–Ω–∞—á–Ω—ã–π IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


# –ü—Ä–æ–≤–µ—Ä–∫—É–∞ –Ω–∞ –≤–≤–æ–¥ IMEI, —á—Ç–æ–±—ã –≤ –Ω—ë–º –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 15)
@dp.message(lambda message: not message.text.isdigit() or len(message.text) != 15)
async def invalid_imei_handler(message: types.Message):
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ 15-–∑–Ω–∞—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π IMEI. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /imei, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å imei"
    )


# –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ IMEI
@dp.message(lambda message: message.text.isdigit() and len(message.text) == 15)
async def imei_handler(message: types.Message):
    imei = message.text.strip()
    check_imei = await validate_imei(imei)
    if check_imei:
        check_imei_api_text = await check_imei_api(imei)
        await message.reply(check_imei_api_text, parse_mode="Markdown")
    else:
        await message.reply(
            f"IMEI {imei} —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /imei, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å imei"
        )


# –ê—Å–Ω–∏—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
